package core;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Node;

import filesystem.FileSystemIO;
import loggers.CellLogger;
import loggers.TimeLogger;
import sim.util.Double3D;

/**
 * This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    
    
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * @author Mark N. Read and Wunna Kyaw
 * 
 *  * Changes made by Wunna 09 Aug 2022:
 * This simulation spawns a number of macrophages and B cell fragments inside a sphere, representing a germinal center.
 * 
 * Macrophages remove B cell fragments upon contact with them. Tracking this rate and it's dependence on various motility parameters
 * is the main purpose of this simulation.
 * 
 * The positions of macrophages are calibrated to the spatial distribution observed in vivo. Namely, that they were evenly distributed
 * around the sphere. These positions were generated by an R script and are located in the directory macInitPos_meanNNdist=36.
 * 
 * Fragment speed and turning behaviour is also calibrated to the simulation. These were found to follow lognormal and beta distributions.
*/


public class SimulationBCell extends Simulation
{
	public static String defaultParametersPath = "lognorm_parameters.xml";
	
	
	public static final String defaultOutputDir = "results/lognorm"
			+ "/";


	final static File initMacDir = new File("macInitPos_meanNNdist=36.8");
	
	
	
	
	File[] macFiles = initMacDir.listFiles();
	Random rand = new Random();
	File initMacPositionFile = macFiles[rand.nextInt(macFiles.length)]; 
	
	
	public static ArrayList<Fragment> fragsln = new ArrayList<Fragment>();	
	public static ArrayList<BCell> bcells = new ArrayList<BCell>();	

	public static ArrayList<Macrophage> macs = new ArrayList<Macrophage>();	

	public static CellLogger cellLogger = null; 
	public CellLogger.CellType bCountLogger;	
	public CellLogger.CellType fragCountLogger;
	public CellLogger.CellType macCountLogger; 
	
	public static int numBCells = 100;	//number of bcells in the imaging volume.
	public static int numMacs = 18; // number of macs in the imaging volume.
	public static int totalBCells; 			// calculated at launch. Includes cells outside the imaging volume, which is much larger than the imaging volume and can be approximated to be boundless.
	public static int totalMacs;
	

	public SimulationBCell()
	{	
		super();		
		try{
			SimulationBCell.loadParameters(parameters);			
		}
		
		catch(XPathExpressionException e) { 
			System.out.println("ERROR reading in parameters: " + e.toString());
		}
	}
	
	public String getDefaulParametersPath()
	{	return defaultParametersPath;		}
	
	/**
	 * Populate the simulation's spatial environment with cells.
	 */
	public void populateCells()
	{		
		if (trackCells)
			cellLogger = new CellLogger();
		
		totalBCells = (int) Math.round(volumeSimulated/volumeImaged * numBCells);
		totalMacs = (int) Math.round(volumeSimulated/volumeImaged * numMacs);
		System.out.println("total number of B cells = " + totalBCells );
		System.out.println("total number of Macs = " + totalMacs );
		System.out.println("number of B cells in volume= " + numBCells );
		System.out.println(bcell_lognorm );


		for(int n = 0; n < totalBCells; n++)
			{
				BCell bcell = new BCell(Simulation.instance.schedule);
				Simulation.space.placeCellRandomly(bcell);
				bcells.add(bcell);
			}
		
		
		
		for(int n = 0; n < totalMacs; n++)
		{
			Macrophage mac = new Macrophage(Simulation.instance.schedule);
			Simulation.space.placeCellRandomly(mac);
			macs.add(mac);

			
			
		}

		
		// record neutrophil initial positions; logging only happens after neutrophils have been stepped.
		for (BCell c : bcells)
			c.getLogger().step(this);		
	}
	
	/**
	 * Populate the simulation's spatial environment with cells.
	 */
	public void populateCellsInSphere(boolean position_macs_randomly )
	{		
		
		if (trackCells)
			cellLogger = new CellLogger();
			bCountLogger = new CellLogger.CellType(new BCell());
			fragCountLogger = new CellLogger.CellType(new Fragment());
			macCountLogger = new CellLogger.CellType(new Macrophage());
		
		totalBCells = numBCells;
		totalMacs = numMacs;

		double totalBVol = (4/3) * Math.PI * Math.pow((BCell.diameter/2), 3);
		if ( totalBVol/volumeSimulated > 0.4) {
			System.out.println("Total Cell volume is " + totalBVol + "while simulated box size is" + volumeSimulated + ". Program may get stuck as there may not be enough 3D space to populate cells. Consider reducing number of cells");
		}
		
		
		System.out.println("Populating " + totalBCells + " cells... Lognorm: " + bcell_lognorm);
		if (bcell_lognorm == true) {
			for(int n = 0; n < totalBCells; n++)
			{
				Fragment frag = new Fragment(Simulation.instance.schedule);
				Simulation.space.placeCellRandomlyInSphere(frag, true);
				fragsln.add(frag);		

			}
			
		} else {
			
			for(int n = 0; n < totalBCells; n++)
			{
				BCell bcell = new BCell(Simulation.instance.schedule);
				Simulation.space.placeCellRandomlyInSphere(bcell, true);
				bcells.add(bcell);
			}
		}
		
		if (!position_macs_randomly) {
			List<List<String>> positionData = FileSystemIO.readImarisCSV(initMacPositionFile, 1);
			
			// random init are enclosed in a sphere at origin 0,0,0. But our simulation's sphere is centered at (r,r,r) (i..e no negative coords)
			// So we need to translate.
			Double3D newCenter = new Double3D(Simulation.tissueRadius, Simulation.tissueRadius,Simulation.tissueRadius);
			List<Double3D> recenteredPos = FileSystemIO.translatePositionData(positionData, newCenter);
			
			for (int n = 0; n < recenteredPos.size(); n++) 
				{
				Macrophage mac = new Macrophage(Simulation.instance.schedule);
				Double3D loc = recenteredPos.get(n);
				Simulation.space.cellField.setObjectLocation(mac, loc);
				macs.add(mac);
			}

		} else if (position_macs_randomly == true) {
			System.out.println("Populating " + numMacs + " Macs randomly in sphere.");
			for (int n = 0; n < numMacs; n++) 
			{
				Macrophage mac = new Macrophage(Simulation.instance.schedule);
				Simulation.space.placeCellRandomlyInSphere(mac, true);
				macs.add(mac);
			}
		}
		
		for (Fragment c : fragsln)
			c.getLogger().step(this);	
		for (BCell c : bcells)
			c.getLogger().step(this);	
		
		System.out.println("total number of B cells = " + bcells.size() );
		System.out.println("total number of Fragments = " + fragsln.size() );
		System.out.println("total number of Macs = " + macs.size() );
		

	}
	
	/** Tears down the simulation, can be used for writing IO. */ 
	public void finish()
	{
		super.finish();
		if (trackCells)
		{
			System.out.println("Writing simulation output data to filesystem: " + outputPath);
			if (Simulation.trackPositions == true) {
				cellLogger.writeTrackData(outputPath);			
			}
			TimeLogger.writeTimeData(outputPath);
			cellLogger.writeCountData(outputPath);		
			cellLogger.writeRemovedCountData(outputPath);			


		}
		System.out.println("Simulation completed, you may close any open windows now.");
	}

	
	public static void loadParameters(Document params) throws XPathExpressionException
	{
		XPath xPath =  XPathFactory.newInstance().newXPath(); 
		Node n;
		n = (Node) xPath.compile("/params/Simulation/BCell/numBCells")
				.evaluate(params, XPathConstants.NODE);
		numBCells = Integer.parseInt(n.getTextContent());
		n = (Node) xPath.compile("/params/Simulation/Macrophage/numMacs")
				.evaluate(params, XPathConstants.NODE);
		numMacs = Integer.parseInt(n.getTextContent());
	}
	
	
	public static void main(String[] args)
	{
		readArgs(args);
		Simulation state = new SimulationBCell();
		execute(state);
	}

	public static String getDefaultOutputDir() {
		return defaultOutputDir;
	}

}
